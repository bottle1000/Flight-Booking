# 워크 플로의 이름 지정
name: CI/CD

# 워크플로가 시작될 조건 지정
on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: flight_booking
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {30..0}; do
            if mysql -h 127.0.0.1 -u root -prootpassword -e "SELECT 1;" &> /dev/null; then
              echo "MySQL is up!"
              break
            fi
            echo 'MySQL is unavailable - sleeping'
            sleep 1
          done

      - name: Check for missing environment variables
        run: |
          VARS=("GOOGLE_CLIENT_ID" "GOOGLE_CLIENT_SECRET" "JWT_ISSUER" "JWT_SECRET_KEY" "AWS_ACCESS_KEY" "AWS_SECRET_KEY" "TOSS_CLIENT_KEY" "TOSS_SECRET_KEY" "SENTRY_DSN")
          ERROR_FOUND=0  # 오류 여부를 저장하는 변수

          for var in "${VARS[@]}"; do
            if [[ -z "${!var}" ]]; then
              echo "‼️‼️ ERROR: Cannot found [ $var ] ‼️‼️"
              ERROR_FOUND=1
            else
              echo "✅✅ Checked success [ $var ] ✅✅"
            fi
          done

          if [[ $ERROR_FOUND -eq 1 ]]; then
            exit 1
          fi

      - name: Build with Gradle (Using CI Profile)
        run: ./gradlew clean build
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/flight_booking
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: rootpassword
          SENTRY_AUTH_TOKEN: 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
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          TOSS_CLIENT_KEY: ${{ secrets.TOSS_CLIENT_KEY }}
          TOSS_SECRET_KEY: ${{ secrets.TOSS_SECRET_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: Set artifact
        run: echo "artifact=$(ls ./build/libs)" >> $GITHUB_ENV

      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: Flight_Booking
          environment_name: FlightBooking-env-1
          version_label: github-action-${{steps.current-time.outputs.formattedTime}}
          region: ap-northeast-2
          deployment_package: ./build/libs/${{env.artifact}}

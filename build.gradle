//sentry buildscript가 plugins보다 앞에 와야함
buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id "io.sentry.jvm.gradle" version "5.2.0"//sentry
}
sourceSets {
    main {
        java.srcDirs("build/generated/querydsl")
    }
}
//sentry task.name가 plugins보다 뒤에 있어야함
tasks.named("generateSentryBundleIdJava").configure {
    dependsOn tasks.named("compileJava")
}
tasks.named("sentryCollectSourcesJava").configure {
    dependsOn tasks.named("compileJava")
}
tasks.named("sentryCollectSourcesJava").configure {
    dependsOn tasks.named("compileTestJava")
}
group = 'flight-booking'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // JWT: JSON Web Token 생성 및 검증
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 파싱 지원
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.0'  // 최신 버전으로 추가

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.springframework.security:spring-security-test'

    // OAuth2
    implementation 'org.springframework.security:spring-security-oauth2-client:6.4.2' // 최신 버전
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //타임리프 설정
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //JSON-Simple
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //ModelMapper
    implementation 'org.modelmapper:modelmapper:3.1.1'

    // Testcontainers 코어 라이브러리
    testImplementation "org.testcontainers:testcontainers:1.19.3"
    testImplementation "org.testcontainers:junit-jupiter:1.19.3"
    testImplementation "org.testcontainers:mysql:1.19.3"

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //sentry
    implementation 'io.sentry:sentry-spring-boot-starter-jakarta:8.2.0'

    // Spring-Retry
    implementation 'org.springframework.retry:spring-retry'

    //S3
    implementation 'software.amazon.awssdk:s3:2.20.29'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.27.0'

    //Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //loki
    implementation 'com.github.loki4j:loki-logback-appender:1.4.0'

    //opencsv (CSV 파일 생성)
    implementation 'com.opencsv:opencsv:5.6'


    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
}

// QueryDSL 설정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDir querydslDir
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}

tasks.named('test') {
    useJUnitPlatform()
}

//빌드시 plain이라는 접미사가 붙은 jar파일 안생기게 함(CD시 필요)
jar {
    enabled = false
}


//sentry
sentry {
    includeSourceContext = true

    org = "none-ddm"
    projectName = "java-spring-boot"
    authToken = System.getenv("SENTRY_AUTH_TOKEN") }